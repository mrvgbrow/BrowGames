#!/c/Users/sp4ce/AppData/Local/Programs/Python/Python310/python

# These lines are only for the creation of the executable. 
# Remove when running from a Ptyhon interpreter.
if getattr(sys,'frozen', False):
    os.chdir(sys._MEIPASS)

import os
import sys
os.environ['PYGAME_HIDE_SUPPORT_PROMPT'] = 'hide' 
#os.environ['SDL_VIDEO_WINDOW_POS']="%d,%d" % (0,0)
import pygame
import menu
import presets
import player
import curved_paddle
import random
import datetime
import ball
import gameconstants as gc

# Initialize the game, music, timer, and screen
pygame.init()
pygame.font.init()
pygame.mixer.music.load("ding.mp3")
clock=pygame.time.Clock()
presets_dict=presets.load_presets()
preset_default='One Player Standard'
presets.set_preset(presets_dict[preset_default])
screen = pygame.display.set_mode([gc.SCREEN_WIDTH, gc.SCREEN_HEIGHT])
menu_run=True
while menu_run:
    menu_run,preset_default=menu.run_menu('Pong',screen,presets_dict,preset_default)
gc.scale_parameters()

font=pygame.font.Font(None,gc.FONT_SIZE)
pygame.mixer.music.set_volume(gc.SOUND_VOLUME)
all_sprites = pygame.sprite.Group()
screen = pygame.display.set_mode([gc.SCREEN_WIDTH, gc.SCREEN_HEIGHT])

# Create the player and ball sprites, add them to sprite groups for 
# ease of processing.
if gc.PADDLE_TYPE=='curved':
    player1=curved_paddle.CurvedPaddle(gc.PLAYER1_X_POSITION,gc.PLAYER1_COLOR)
    player2=curved_paddle.CurvedPaddle(gc.PLAYER2_X_POSITION,gc.PLAYER2_COLOR)
else:
    player1=player.Player(gc.PLAYER1_X_POSITION,gc.PLAYER1_COLOR)
    player2=player.Player(gc.PLAYER2_X_POSITION,gc.PLAYER2_COLOR)
all_sprites.add(player1,player2)

balls=pygame.sprite.Group()
for i in range(gc.BALL_NUMBER):
    ball_i=ball.Ball()
    balls.add(ball_i)
    all_sprites.add(ball_i)

# Initialize variables
running = True    # Flag indicating when to stop the game
total_time=0      
score_player1=0   
score_player2=0
current_player=2
pause=False
step=False

while running:

    # Did the user click the window close button?
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == gc.KEYDOWN:
            if event.key == gc.K_ESCAPE:
                running = False
            if event.key == gc.K_p:
                if pause:
                    pause=False
                else:
                    pause=True
            if event.key == gc.K_RIGHTBRACKET:
                step=True

    # If paused, continuously skip over the game loop (except event processing).
    # If taking one step through the loop, don't pause but unset the step
    # immediately after.
    if pause and not step:
        pygame.time.delay(16)
        continue
    if step:
        step=False

    pressed_keys = pygame.key.get_pressed()

    # For each ball, determine the position where the it will intersect with
    # the horizontal positions of player 1 and player 2. This is used by the
    # AI to decide where to move.
    for ball_i in balls:
        if ball_i.player_active == 2:
            intercept=gc.PLAYER2_X_POSITION
        else:
            intercept=gc.PLAYER1_X_POSITION
        ball_i.update(intercept)

    # Only update the AI position when the ball is moving towards it
    if current_player == 1:
        player1.update(pressed_keys,gc.PLAYER1_CONTROL,ball_i.intercept)
        player2.update(pressed_keys,gc.PLAYER2_CONTROL,-1)
    else:
        player1.update(pressed_keys,gc.PLAYER1_CONTROL,-1)
        player2.update(pressed_keys,gc.PLAYER2_CONTROL,ball_i.intercept)


    # Fill the background
    screen.fill(gc.SCREEN_COLOR)

    # Render all sprites on the screen
    for entity in all_sprites:
        screen.blit(entity.surf,entity.rect)

    # Render the score in the upper left corner 
    if not gc.SCORE_HIDE:
        score_text=font.render(f'Player1: {score_player1}  Player2: {score_player2}',True,(255,255,255))
        screen.blit(score_text, (gc.SCORE_XPOS,gc.SCORE_YPOS))

    # Check whether any balls are colliding with the player 1. If so, compute
    # the bounce angle and change the active player
    balls_hit=pygame.sprite.spritecollide(player1, balls,False,collided=pygame.sprite.collide_mask)
    if balls_hit:
        for ball_hit in balls_hit:
            if ball_hit.player_active==1:
                if gc.ORIGINAL_BOUNCE:
                  new_angle=player1.compute_original_angle(ball_hit.rect.centery,ball_hit.speedx)
                  ball_hit.set_angle(new_angle)
                else:
                  ball_hit.bounce_wall('right')
                  anglechange=player1.compute_anglechange(ball_hit.rect.centery)
                  ball_hit.anglechange(anglechange)
                player1.target=gc.SCREEN_HEIGHT*random.random()
                ball_hit.player_active=2
                current_player=2

    # Check whether any balls are colliding with the player 2. If so, compute
    # the bounce angle and change the active player
    balls_hit=pygame.sprite.spritecollide(player2, balls,False,collided=pygame.sprite.collide_mask)
    if balls_hit:
        for ball_hit in balls_hit:
            if ball_hit.player_active==2:
                if gc.ORIGINAL_BOUNCE:
                  new_angle=player2.compute_original_angle(ball_hit.rect.centery,ball_hit.speedx)
                  ball_hit.set_angle(new_angle)
                else:
                  ball_hit.bounce_wall('left')
                  anglechange=-player2.compute_anglechange(ball_hit.rect.centery)
                  ball_hit.anglechange(anglechange)
                player2.target=gc.SCREEN_HEIGHT*random.random()
                ball_hit.player_active=1
                current_player=1

    # If no balls remain on the field, increment the score for the player
    # whose turn it *isn't*
    if not balls:

        # This code was used to generate a demo of the original bounce pattern
#        for i in range(5):
#          ball_0=ball.Ball()
#          ball_0.y=0.5*gc.SCREEN_HEIGHT-gc.PLAYER_HEIGHT/2+float(i)*gc.PLAYER_HEIGHT/4
#          ball_0.rect.centery=0.5*gc.SCREEN_HEIGHT-gc.PLAYER_HEIGHT/2+float(i)*gc.PLAYER_HEIGHT/4+15
#          ball_0.speedy=0
#          ball_0.speedx=gc.BALL_SPEED/gc.TICK_FRAMERATE
#          balls.add(ball_0)
#          all_sprites.add(ball_0)

        ball_0=ball.Ball()
        balls.add(ball_0)
        all_sprites.add(ball_0)
        if current_player==1:
            score_player2+=1
        else:
            score_player1+=1
        current_player=2

    # Update the display
    pygame.display.flip()

    clock.tick(gc.TICK_FRAMERATE)
    total_time=total_time+1/gc.TICK_FRAMERATE

# Print the game time and score to a table to keep track of high scores
original_stdout = sys.stdout
with open('scores.dat','a') as f:
    sys.stdout = f
    print('%s, Player1 (%s): %d,  Player2 (%s): %d,  Game Time: %.2f seconds' % (datetime.datetime.now(),gc.PLAYER1_CONTROL,score_player1,gc.PLAYER2_CONTROL,score_player2,total_time))
    sys.stdout=original_stdout

# Stop the sound effects
pygame.mixer.music.stop()
pygame.mixer.quit()

# Done! Time to quit.
pygame.quit()

